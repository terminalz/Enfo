import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { useSession } from "next-auth/react";
import { prisma } from "@/lib/prisma";
import Navbar from "@/components/Navbar";
import { User } from ".prisma/client";
import CreateProduct from "@/components/CreateProduct";

interface Props {
  shop?: any;
  user?: User;
}

const Settings: NextPage<Props> = ({ shop, user }) => {
  const { data: session } = useSession();
  // console.log(shop?.description);
  const [createNewProduct, setCreateNewProduct] = useState(0);

  return (
    <div>
      <Head>
        <title>Enfo</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <>
        <div
          className="w-full h-44 background_image"
          style={{ backgroundImage: `url(${shop?.banner_url})` }}
        />
        <div className="layout">
          <div className="flex items-center justify-between w-full">
            <h2>{shop?.name}</h2>
          </div>
          <div>
            <p className="whitespace-pre-wrap">{shop?.description}</p>
          </div>
          <div className="flex items-center justify-between w-full mt-10">
            <h3 className="font-bold">Product</h3>
            {user?.email === session?.user?.email && (
              <button
                className="p-2 m-1 bg-gray-100 rounded-md hover:bg-gray-200"
                type="button"
                onClick={() => setCreateNewProduct(1)}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  width="24"
                  height="24"
                >
                  <path fill="none" d="M0 0h24v24H0z" />
                  <path d="M11 11V5h2v6h6v2h-6v6h-2v-6H5v-2z" />
                </svg>
              </button>
            )}
          </div>
          {user?.email === session?.user?.email && (
            <CreateProduct
              shop_id={shop?.id}
              createNewProduct={createNewProduct}
              setCreateNewProduct={setCreateNewProduct}
            />
          )}
          <div className="grid gap-5 mt-10 md:grid-cols-2 lg:grid-cols-3">
            {shop?.product?.map((p: any) => (
              <a
                key={p?.id}
                href={p?.backlink_url}
                target="_blank"
                rel="noopener noreferrer"
              >
                <div className="border rounded">
                  {/* eslint-disable-next-line @next/next/no-img-element */}
                  <img
                    src={p?.image_url}
                    alt=""
                    className="object-cover w-full max-h-[180px]"
                  />
                  <div className="p-4">
                    <h4 className="font-medium">{p?.name}</h4>
                    <h5 className="mb-3 text-sm text-gray-600">
                      {p?.description}
                    </h5>
                    {p?.price && <h4 className="font-medium">RM {p?.price}</h4>}
                  </div>
                </div>
              </a>
            ))}
          </div>
        </div>
      </>
    </div>
  );
};

export default Settings;

export const getServerSideProps: GetServerSideProps = async (context) => {
  let shop;
  let user: User = {
    id: "",
    name: null,
    email: null,
    emailVerified: null,
    image: null,
  };
  try {
    // @ts-ignore
    shop = await prisma.shop.findUnique({
      where: {
        // @ts-ignore
        id: context?.params?.id,
      },
      include: {
        product: true,
      },
    });
    // @ts-ignore
    user = await prisma.shop
      .findUnique({
        where: {
          // @ts-ignore
          id: context?.params?.id,
        },
      })
      .user();
  } catch (error) {
    //
  }
  return {
    props: { shop, user },
    notFound: false,
  };
};
